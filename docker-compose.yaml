x-common-env: &common-env
    KEYCLOAK_ISSUER_URL: ${KEYCLOAK_ISSUER_URL:-http://keycloak:8080/realms/bank-app}
    RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
    RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}

services:
  notifications-service:
    build:
      context: ./notifications-service
    image: notifications_service:1.0.0
    container_name: notifications-service
    hostname: notifications-service
    environment:
      <<: *common-env
      SERVICE_DB_HOST: ${NOTIFICATIONS_SERVICE_DB_HOST}
      SERVICE_DB_USER: ${NOTIFICATIONS_SERVICE_DB_USER}
      SERVICE_DB_PASSWORD: ${NOTIFICATIONS_SERVICE_DB_PASSWORD}
    expose:
      - "8080"
    ports:
      - "8083:8080"
    depends_on:
      rabbitmq:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      notifications-service-db:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent ${API_GATEWAY_URL}/notifications-service/actuator/health | grep UP || exit 1"
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s
    networks:
      - bank-net

  notifications-service-db:
    image: postgres:17.2
    container_name: notifications-service-db
    hostname: notifications-service-db
    restart: "no"
    volumes:
      - notification_service_db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${NOTIFICATIONS_SERVICE_DB_USER}
      POSTGRES_PASSWORD: ${NOTIFICATIONS_SERVICE_DB_PASSWORD}
      POSTGRES_DB: app_db
    expose:
      - "5432"
    ports:
      - "5433:5432"
    healthcheck:
      test: pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5
    networks:
      - bank-net

  exchange-service:
    build:
      context: ./exchange-service
    image: exchange_service:1.0.0
    container_name: exchange-service
    hostname: exchange-service
    environment:
      <<: *common-env
      SERVICE_DB_HOST: ${EXCHANGE_SERVICE_DB_HOST}
      SERVICE_DB_USER: ${EXCHANGE_SERVICE_DB_USER}
      SERVICE_DB_PASSWORD: ${EXCHANGE_SERVICE_DB_PASSWORD}
    expose:
      - "8080"
    ports:
      - "8084:8080"
    depends_on:
      rabbitmq:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      exchange-service-db:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent ${API_GATEWAY_URL}/exchange-service/actuator/health | grep UP || exit 1"
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s
    networks:
      - bank-net

  exchange-service-db:
    image: postgres:17.2
    container_name: exchange-service-db
    hostname: exchange-service-db
    restart: "no"
    volumes:
      - exchange_service_db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${EXCHANGE_SERVICE_DB_USER}
      POSTGRES_PASSWORD: ${EXCHANGE_SERVICE_DB_PASSWORD}
      POSTGRES_DB: app_db
    expose:
      - "5432"
    ports:
      - "5434:5432"
    healthcheck:
      test: pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5
    networks:
      - bank-net

  accounts-service:
    build:
      context: ./accounts-service
    image: accounts_service:1.0.0
    container_name: accounts-service
    hostname: accounts-service
    environment:
      <<: *common-env
      SERVICE_DB_HOST: ${ACCOUNTS_SERVICE_DB_HOST}
      SERVICE_DB_USER: ${ACCOUNTS_SERVICE_DB_USER}
      SERVICE_DB_PASSWORD: ${ACCOUNTS_SERVICE_DB_PASSWORD}
    expose:
      - "8080"
    ports:
      - "8086:8080"
    depends_on:
      rabbitmq:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      accounts-service-db:
        condition: service_healthy
      notifications-service:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent ${API_GATEWAY_URL}/accounts-service/actuator/health | grep UP || exit 1"
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s
    networks:
      - bank-net

  accounts-service-db:
    image: postgres:17.2
    container_name: accounts-service-db
    hostname: accounts-service-db
    restart: "no"
    volumes:
      - accounts_service_db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${ACCOUNTS_SERVICE_DB_USER}
      POSTGRES_PASSWORD: ${ACCOUNTS_SERVICE_DB_PASSWORD}
      POSTGRES_DB: app_db
    expose:
      - "5432"
    ports:
      - "5440:5432"
    healthcheck:
      test: pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5
    networks:
      - bank-net

  cash-service:
    build:
      context: ./cash-service
    image: cash_service:1.0.0
    container_name: cash-service
    hostname: cash-service
    environment:
      <<: *common-env
      SERVICE_DB_HOST: ${CASH_SERVICE_DB_HOST}
      SERVICE_DB_USER: ${CASH_SERVICE_DB_USER}
      SERVICE_DB_PASSWORD: ${CASH_SERVICE_DB_PASSWORD}
    expose:
      - "8080"
    ports:
      - "8087:8080"
    depends_on:
      rabbitmq:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      cash-service-db:
        condition: service_healthy
      notifications-service:
        condition: service_healthy
      blocker-service:
        condition: service_healthy
      accounts-service:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent ${API_GATEWAY_URL}/cash-service/actuator/health | grep UP || exit 1"
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s
    networks:
      - bank-net

  cash-service-db:
    image: postgres:17.2
    container_name: cash-service-db
    hostname: cash-service-db
    restart: "no"
    volumes:
      - cash_service_db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${CASH_SERVICE_DB_USER}
      POSTGRES_PASSWORD: ${CASH_SERVICE_DB_PASSWORD}
      POSTGRES_DB: app_db
    expose:
      - "5432"
    ports:
      - "5441:5432"
    healthcheck:
      test: pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5
    networks:
      - bank-net

  transfer-service:
    build:
      context: ./transfer-service
    image: transfer_service:1.0.0
    container_name: transfer-service
    hostname: transfer-service
    environment:
      <<: *common-env
      SERVICE_DB_HOST: ${TRANSFER_SERVICE_DB_HOST}
      SERVICE_DB_USER: ${TRANSFER_SERVICE_DB_USER}
      SERVICE_DB_PASSWORD: ${TRANSFER_SERVICE_DB_PASSWORD}
    expose:
      - "8080"
    ports:
      - "8088:8080"
    depends_on:
      rabbitmq:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      cash-service-db:
        condition: service_healthy
      notifications-service:
        condition: service_healthy
      blocker-service:
        condition: service_healthy
      accounts-service:
        condition: service_healthy
      exchange-service:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent ${API_GATEWAY_URL}/transfer-service/actuator/health | grep UP || exit 1"
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s
    networks:
      - bank-net

  transfer-service-db:
    image: postgres:17.2
    container_name: transfer-service-db
    hostname: transfer-service-db
    restart: "no"
    volumes:
      - transfer_service_db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${TRANSFER_SERVICE_DB_USER}
      POSTGRES_PASSWORD: ${TRANSFER_SERVICE_DB_PASSWORD}
      POSTGRES_DB: app_db
    expose:
      - "5432"
    ports:
      - "5442:5432"
    healthcheck:
      test: pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5
    networks:
      - bank-net

  exchange-generator:
    build:
      context: ./exchange-generator
    image: exchange_generator:1.0.0
    container_name: exchange-generator
    hostname: exchange-generator
    environment:
      <<: *common-env
    expose:
      - "8080"
    depends_on:
      rabbitmq:
        condition: service_healthy
      exchange-service:
        condition: service_healthy
    networks:
      - bank-net

  blocker-service:
    build:
      context: ./blocker-service
    image: blocker_service:1.0.0
    container_name: blocker-service
    hostname: blocker-service
    environment:
      <<: *common-env
    expose:
      - "8080"
    ports:
      - "8085:8080"
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent ${API_GATEWAY_URL}/blocker-service/actuator/health | grep UP || exit 1"
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s
    networks:
      - bank-net

  front-ui:
    build:
      context: ./front-ui
    image: front-ui:1.0.0
    container_name: front-ui
    hostname: front-ui
    environment:
      <<: *common-env
    expose:
      - "8080"
    ports:
      - "8095:8080"
    depends_on:
      rabbitmq:
        condition: service_healthy
      accounts-service:
        condition: service_healthy
      transfer-service:
        condition: service_healthy
      cash-service:
        condition: service_healthy
      exchange-service:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent ${API_GATEWAY_URL}/bank-app/actuator/health | grep UP || exit 1"
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s
    networks:
      - bank-net

  rabbitmq:
    restart: always
    image: rabbitmq:3-management
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - "5672:5672"       # порт для AMQP (протокол RabbitMQ)
      - "15672:15672"     # порт для веб-интерфейса управления
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - bank-net

  keycloak:
    image: quay.io/keycloak/keycloak:26.1.3
    container_name: keycloak
    hostname: keycloak
    command:
      - start
      - --import-realm
    ports:
      - "8092:8080"
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db:5432/keycloak
      KC_DB_USERNAME: ${KC_DB_USERNAME:-keycloak}
      KC_DB_PASSWORD: ${KC_DB_PASSWORD:-keycloak}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin}
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8080
      KC_HOSTNAME_STRICT: 'false'
      KC_HOSTNAME_STRICT_HTTPS: 'false'
      KC_HTTP_ENABLED: 'true'
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
      KC_LOG_LEVEL: org.keycloak:DEBUG,org.jboss.resteasy:DEBUG
    volumes:
      - ./keycloak/:/opt/keycloak/data/import/
    depends_on:
      keycloak-db:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:9000/health/live']
      interval: 5s
      timeout: 5s
      retries: 30
    networks:
      - bank-net

  keycloak-db:
    image: postgres:17.2
    container_name: keycloak-db
    restart: "no"
    volumes:
      - keycloak_db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${KC_DB_USERNAME:-keycloak}
      POSTGRES_PASSWORD: ${KC_DB_PASSWORD:-keycloak}
      POSTGRES_DB: keycloak
    healthcheck:
      test: pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5
    networks:
      - bank-net

networks:
  bank-net:
    driver: bridge

volumes:
  keycloak_db_data:
    name: keycloak_db_data
  notification_service_db_data:
    name: notification_service_db_data
  exchange_service_db_data:
    name: exchange_service_db_data
  accounts_service_db_data:
    name: accounts_service_db_data
  cash_service_db_data:
    name: cash_service_db_data
  transfer_service_db_data:
    name: transfer_service_db_data