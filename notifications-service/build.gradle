configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    implementation project(':api')
    implementation 'org.mapstruct:mapstruct:1.6.3'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.springframework.kafka:spring-kafka:3.3.6'
    implementation 'io.projectreactor.kafka:reactor-kafka:1.3.23'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.19.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.19.0'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-oauth2-jose'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework:spring-jdbc:6.2.3'
    implementation 'com.zaxxer:HikariCP:6.2.1'
    implementation 'org.liquibase:liquibase-core:4.31.1'
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    implementation 'org.postgresql:r2dbc-postgresql:1.0.7.RELEASE'
    testRuntimeOnly 'com.h2database:h2'
    implementation 'org.postgresql:postgresql'
    testRuntimeOnly 'io.r2dbc:r2dbc-h2:1.0.0.RELEASE'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test:3.7.3'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-verifier'
    testImplementation 'io.rest-assured:spring-web-test-client:5.5.2'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
}

springBoot {
    buildInfo()  // исполнение задачи по добавлению информации о сборке
}

bootJar {
    launchScript()
    // добавление атрибутов к манифесту
    manifest {
        attributes(
                'Implementation-Title': 'Reactive Spring Boot REST сервис уведомлений',
                'Build-Timestamp': System.currentTimeMillis(),
                'Built-By': project.hasProperty('builtBy') ? project.property('builtBy') : 'default-builder'
        )
    }
    // имя и версия создаваемого архива
    archiveBaseName = 'notifications-service'
    archiveVersion = project.version
}

// Отключаем задачи Spring Cloud Contract
afterEvaluate {
    tasks.matching { it.name.startsWith("contract") || it.name.contains("Contract") }.configureEach {
        enabled = false
    }
}