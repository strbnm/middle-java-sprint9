pipeline {
    agent any
    options {
        // This is required if you want to clean before build
        skipDefaultCheckout(true)
    }

    parameters {
        booleanParam(name: 'SKIP_DEPLOY', defaultValue: false, description: 'Skip deploy stage?')
    }

    environment {
        MODULE                              = 'exchange-generator'
        RELEASE_NAME                        = 'exchange-generator'

        DOCKER_REGISTRY                     = credentials('DOCKER_REGISTRY')
        NEXUS_REPOSITORY_RELEASES_URL       = 'http://nexus:8081/repository/maven-releases/'
        GITHUB_USERNAME                     = credentials('GITHUB_USERNAME')
        IMAGE_TAG                           = "${env.BUILD_NUMBER}"
        NEXUS_PASSWORD                      = credentials('NEXUS_JENKINS_PASSWORD')
        STUBRUNNER_PASSWORD                 = credentials('NEXUS_JENKINS_PASSWORD')
        STUBRUNNER_USERNAME                 = 'jenkins'

        TEST_REPORT_DIR                     = 'build/reports/tests/test'
        CONTRACT_TEST_REPORT_DIR            = 'build/reports/tests/contractTest'
        JACOCO_HTML                         = 'build/reports/jacoco/test/html'
    }

    stages {
        stage('Set CI Version') {
            steps {
                script {
                    def date = new Date()
                    def formatter = new java.text.SimpleDateFormat("yyyyMMdd-HHmm")
                    def timestamp = formatter.format(date)
                    env.IMAGE_TAG = "${env.BUILD_NUMBER}"
                    env.CI_VERSION = "${env.BUILD_NUMBER}-${timestamp}"
                    echo "CI_VERSION set to ${env.CI_VERSION}"
                }
            }
        }
        stage("Получение исходников") {
            steps {
                cleanWs()
                // We need to explicitly checkout from SCM here
                checkout scm
                sh 'chmod +x ./gradlew'
            }
        }
        stage("Сборка и тест") {
            steps {
                sh './gradlew :$MODULE:clean :$MODULE:build -PnexusUsername=jenkins -PnexusPassword=$NEXUS_PASSWORD'
            }
        }
        stage('Генерация метрик') {
            steps {
                echo "Ключевые метрики сборки:"
                echo "- Длительность: ${currentBuild.durationString}"
                echo "- Автор: ${env.BUILD_USER ?: 'N/A'}"
                echo "- Статус: ${currentBuild.currentResult}"
                echo "- Коммит: ${env.GIT_COMMIT ?: 'N/A'}"
            }
        }
        stage('Публикация отчетов') {
            parallel {
                stage('Отчёт Jacoco в HTML') {
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                            publishHTML(target: [
                                reportDir: "${env.MODULE}/${env.JACOCO_HTML}",
                                reportFiles: 'index.html',
                                reportName: 'Jacoco Code Coverage',
                                keepAll: true,
                                alwaysLinkToLastBuild: true,
                                allowMissing: true
                            ])
                        }
                    }
                }
                stage('Отчёт по тестам в HTML') {
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                            publishHTML(target: [
                                reportDir: "${env.MODULE}/${env.TEST_REPORT_DIR}",
                                reportFiles: 'index.html',
                                reportName: 'Unit tests report',
                                keepAll: true,
                                alwaysLinkToLastBuild: true,
                                allowMissing: true
                            ])
                        }
                    }
                }
                stage('Отчёт по контрактным тестам в HTML') {
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                            publishHTML(target: [
                                reportDir: "${env.MODULE}/${env.CONTRACT_TEST_REPORT_DIR}",
                                reportFiles: 'index.html',
                                reportName: 'Contracts tests report',
                                keepAll: true,
                                alwaysLinkToLastBuild: true,
                                allowMissing: true
                            ])
                        }
                    }
                }
            }
        }

        stage("Сборка образа Docker") {
            steps {
                sh 'docker build -t $DOCKER_REGISTRY/$MODULE:$IMAGE_TAG --build-arg CI_VERSION=$CI_VERSION $MODULE'
            }
        }
        stage('Пуш в репозиторий') {
            steps {
                withCredentials([string(credentialsId: 'GHCR_TOKEN', variable: 'GHCR_TOKEN')]) {
                    sh """
                    echo \$GHCR_TOKEN | docker login ghcr.io -u ${env.GITHUB_USERNAME} --password-stdin
                    docker push ${env.DOCKER_REGISTRY}/${env.MODULE}:${env.IMAGE_TAG}
                    """
                }
            }
        }
        stage('Деплой на TEST') {
            when {
                 expression { return !params.SKIP_DEPLOY }
            }
            stages {
                stage('Создание пространства имен') {
                    steps {
                        sh 'kubectl get namespace test >/dev/null 2>&1 || kubectl create namespace test'
                    }
                }
                stage('Create Secrets for TEST') {
                    steps {
                        withCredentials([string(credentialsId: 'GHCR_TOKEN', variable: 'GHCR_TOKEN')]) {
                            sh """
                            kubectl create secret docker-registry ghcr-registry \\
                            --docker-server=${DOCKER_REGISTRY} \\
                            --docker-username=${GITHUB_USERNAME} \\
                            --docker-password=${GHCR_TOKEN} \\
                            -n test --dry-run=client -o yaml | kubectl apply -f -
                            """
                        }
                        withCredentials([string(credentialsId: 'EXCHANGE_CLIENT_SECRET', variable: 'EXCHANGE_CLIENT_SECRET')]) {
                            sh '''
                            kubectl create secret generic oauth2-client-secret-exchange \\
                              --from-literal=password=$EXCHANGE_CLIENT_SECRET \\
                              -n test --dry-run=client -o yaml | kubectl apply -f -
                            '''
                        }
                        withCredentials([string(credentialsId: 'KEYCLOAK_PASS', variable: 'KEYCLOAK_PASS')]) {
                            sh '''
                            kubectl create secret generic keycloak-secret \\
                              --from-literal=password=$KEYCLOAK_PASS \\
                              -n test --dry-run=client -o yaml | kubectl apply -f -
                            '''
                        }
                    }
                }
                stage('Установка глобальных переменных') {
                    steps {
                        dir('bank-app') {
                            sh """
                            echo "Рендерим шаблон c глобальными переменными и устанавливаем/обновляем его в кластере"
                            helm template $RELEASE_NAME . \\
                            -n test \\
                            -s templates/configmap.yaml | kubectl apply -n test -f -
                            """
                        }
                    }
                }
                stage('Install Keycloak if needed') {
                    steps {
                        sh """
                        # Используется только в учебном проекте!!! Создаем ConfigMap с конфигурацией realm из файла.
                        # В реальных проектах должно быть создано отдельно и конфигурация не должна храниться в VCS

                        if ! helm list -n test | grep -q keycloak; then
                          echo "Keycloak not found, installing..."

                          kubectl create configmap my-realm-config \\
                            --from-file=keycloak/bank-app-realm.json \\
                            -n test --dry-run=client -o yaml | kubectl apply -f -

                          helm upgrade --install keycloak bank-app/charts/keycloak \\
                            -n test --create-namespace \\
                            --set extraVolumes[0].name=realm-config \\
                            --set extraVolumes[0].configMap.name=my-realm-config \\
                            --set extraVolumeMounts[0].name=realm-config \\
                            --set extraVolumeMounts[0].mountPath=/opt/bitnami/keycloak/data/import \\
                            --set extraVolumeMounts[0].readOnly=true \\
                            --set extraStartupArgs="--import-realm"

                          helm template keycloak . -n test -s templates/keycloak_httproute.yaml | kubectl apply -f -

                        else
                          echo "Keycloak already installed — skipping config and upgrade."
                        fi
                        """
                    }
                }
                stage('Helm Deploy to TEST') {
                    steps {
                        dir('bank-app') {
                            sh """
                            helm upgrade --install ${RELEASE_NAME} charts/${MODULE} \\
                              --namespace test --create-namespace \\
                              --set image.repository=${DOCKER_REGISTRY}/${MODULE} \\
                              --set image.tag=${IMAGE_TAG} \\
                              --set imagePullSecrets[0].name=ghcr-registry
                            """
                        }
                    }
                }
            }
        }
        stage('Ручное подтверждение для PROD') {
            when {
                 expression { return !params.SKIP_DEPLOY }
            }
            steps {
                input message: 'Установить в PROD?', ok: 'Да, установить'
            }
        }
        stage('Деплой на PROD') {
            when {
                 expression { return !params.SKIP_DEPLOY }
            }
            stages {
                stage('Создание пространства имен') {
                    steps {
                        sh 'kubectl get namespace prod >/dev/null 2>&1 || kubectl create namespace prod'
                    }
                }
                stage('Create Secrets for PROD') {
                    steps {
                        withCredentials([string(credentialsId: 'GHCR_TOKEN', variable: 'GHCR_TOKEN')]) {
                            sh """
                            kubectl create secret docker-registry ghcr-registry \\
                            --docker-server=${DOCKER_REGISTRY} \\
                            --docker-username=${GITHUB_USERNAME} \\
                            --docker-password=${GHCR_TOKEN} \\
                            -n prod --dry-run=client -o yaml | kubectl apply -f -
                            """
                        }
                        withCredentials([string(credentialsId: 'EXCHANGE_CLIENT_SECRET', variable: 'EXCHANGE_CLIENT_SECRET')]) {
                            sh '''
                            kubectl create secret generic oauth2-client-secret-exchange \\
                              --from-literal=password=$EXCHANGE_CLIENT_SECRET \\
                              -n prod --dry-run=client -o yaml | kubectl apply -f -
                            '''
                        }
                        withCredentials([string(credentialsId: 'KEYCLOAK_PASS', variable: 'KEYCLOAK_PASS')]) {
                            sh '''
                            kubectl create secret generic keycloak-secret \\
                              --from-literal=password=$KEYCLOAK_PASS \\
                              -n prod --dry-run=client -o yaml | kubectl apply -f -
                            '''
                        }
                    }
                }
                stage('Установка глобальных переменных') {
                    steps {
                        dir('bank-app') {
                            sh """
                            echo "Рендерим шаблон c глобальными переменными и устанавливаем/обновляем его в кластере"
                            helm template $RELEASE_NAME . \\
                            -n prod \\
                            -s templates/configmap.yaml | kubectl apply -n prod -f -
                            """
                        }
                    }
                }
                stage('Install Keycloak if needed') {
                    steps {
                        sh """
                        # Используется только в учебном проекте!!! Создаем ConfigMap с конфигурацией realm из файла.
                        # В реальных проектах должно быть создано отдельно и конфигурация не должна храниться в VCS

                        if ! helm list -n prod | grep -q keycloak; then
                          echo "Keycloak not found, installing..."

                          kubectl create configmap my-realm-config \\
                            --from-file=keycloak/bank-app-realm.json \\
                            -n prod --dry-run=client -o yaml | kubectl apply -f -

                          helm upgrade --install keycloak bank-app/charts/keycloak \\
                            -n prod --create-namespace \\
                            --set extraVolumes[0].name=realm-config \\
                            --set extraVolumes[0].configMap.name=my-realm-config \\
                            --set extraVolumeMounts[0].name=realm-config \\
                            --set extraVolumeMounts[0].mountPath=/opt/bitnami/keycloak/data/import \\
                            --set extraVolumeMounts[0].readOnly=true \\
                            --set extraStartupArgs="--import-realm"

                          helm template keycloak . -n test -s templates/keycloak_httproute.yaml | kubectl apply -f -

                        else
                          echo "Keycloak already installed — skipping config and upgrade."
                        fi
                        """
                    }
                }
                stage('Helm Deploy to PROD') {
                    steps {
                        dir('bank-app') {
                            sh """
                            helm upgrade --install ${RELEASE_NAME} charts/${MODULE} \\
                              --namespace prod --create-namespace \\
                              --set image.repository=${DOCKER_REGISTRY}/${MODULE} \\
                              --set image.tag=${IMAGE_TAG} \\
                              --set imagePullSecrets[0].name=ghcr-registry
                            """
                        }
                    }
                }
            }
        }
    }
}
