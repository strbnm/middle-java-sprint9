logging:
  level:
    org.springframework.cloud.gateway: DEBUG
    org.springframework.web.reactive: DEBUG
    reactor.netty.http.client: DEBUG
    reactor.netty.http.server: DEBUG
server:
  port: 8080
management:
  endpoints:
    web:
      exposure:
        include: health,refresh,busrefresh,busshutdown
eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    serviceUrl:
      defaultZone: ${EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE}
    healthcheck:
      enabled: true
spring:
  application:
    name: api-gateway
  rabbitmq:
    host: rabbitmq
    port: 5672
    username: ${RABBITMQ_DEFAULT_USER}
    password: ${RABBITMQ_DEFAULT_PASS}

  cloud:
    gateway:
      discovery:
        locator:
          enabled: true
      routes:
        - id: front-ui-root
          uri: lb://FRONT-UI
          predicates:
            - Path=/bank-app/**
          filters:
            - RewritePath=/bank-app/?(?<segment>.*), /$\{segment}
            - PreserveHostHeader
            - SaveSession
#            - AddResponseHeader=Content-Security-Policy, default-src 'self'; script-src 'self' 'unsafe-inline';
            - AddResponseHeader=Referrer-Policy, strict-origin-when-cross-origin
#            - AddResponseHeader=X-Content-Type-Options, nosniff
            - AddResponseHeader=X-Frame-Options, DENY

        - id: accounts-service
          uri: lb://ACCOUNTS-SERVICE
          predicates:
            - Path=/accounts-service/**
          filters:
            - RewritePath=/accounts-service/?(?<segment>.*), /$\{segment}
            - TokenRelay=accounts-client
            - name: CircuitBreaker
              args:
                name: accountsServiceCircuitBreaker
                fallbackUri: forward:/fallback/accounts-service

        - id: cash-service
          uri: lb://CASH-SERVICE
          predicates:
            - Path=/cash-service/**
          filters:
            - RewritePath=/cash-service/?(?<segment>.*), /$\{segment}
            - TokenRelay=cash-client
            - name: CircuitBreaker
              args:
                name: cashServiceCircuitBreaker
                fallbackUri: forward:/fallback/cash-service

        - id: blocker-service
          uri: lb://BLOCKER-SERVICE
          predicates:
            - Path=/blocker-service/**
          filters:
            - RewritePath=/blocker-service/?(?<segment>.*), /$\{segment}
            - TokenRelay=blocker-client
            - name: CircuitBreaker
              args:
                name: blockerServiceCircuitBreaker
                fallbackUri: forward:/fallback/blocker-service

        - id: exchange-service
          uri: lb://EXCHANGE-SERVICE
          predicates:
            - Path=/exchange-service/**
          filters:
            - RewritePath=/exchange-service/?(?<segment>.*), /$\{segment}
            - TokenRelay=exchange-client
            - name: CircuitBreaker
              args:
                name: exchangeServiceCircuitBreaker
                fallbackUri: forward:/fallback/exchange-service

        - id: exchange-generator
          uri: lb://EXCHANGE-GENERATOR
          predicates:
            - Path=/exchange-generator/**
          filters:
            - RewritePath=/exchange-generator/?(?<segment>.*), /$\{segment}
            - TokenRelay=exchange-generator-client

        - id: notifications-service
          uri: lb://notifications-service
          predicates:
            - Path=/notifications-service/**
          filters:
            - TokenRelay=notification-client
            - RewritePath=/notifications-service/?(?<segment>.*), /$\{segment}

        - id: transfer-service
          uri: lb://TRANSFER-SERVICE
          predicates:
            - Path=/transfer-service/**
          filters:
            - RewritePath=/transfer-service/?(?<segment>.*), /$\{segment}
            - TokenRelay=transfer-client
            - name: CircuitBreaker
              args:
                name: transferServiceCircuitBreaker
                fallbackUri: forward:/fallback/transfer-service

      globalcors:
        corsConfigurations:
          '[/**]':
            allowedOrigins:
              - "http://localhost:8090"
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - OPTIONS
            allowedHeaders: "*"
            allowCredentials: true

  security:
    oauth2:
      client:
        provider:
          keycloak:
            issuer-uri: ${KEYCLOAK_ISSUER_URL} # Адрес сервера авторизации для получения токена
        registration:
          accounts-client:
            provider: keycloak
            client-id: accounts-client
            client-secret: ${ACCOUNTS_CLIENT_SECRET}
            scope: resource.readwrite
            authorization-grant-type: client_credentials
            clientAuthenticationMethod: client_secret_post
          cash-client:
            provider: keycloak
            client-id: cash-client
            client-secret: ${CASH_CLIENT_SECRET}
            scope: resource.readwrite
            authorization-grant-type: client_credentials
            clientAuthenticationMethod: client_secret_post
          exchange-client:
            provider: keycloak
            client-id: exchange-client
            client-secret: ${EXCHANGE_CLIENT_SECRET}
            scope: resource.readwrite
            authorization-grant-type: client_credentials
            clientAuthenticationMethod: client_secret_post
          exchange-generator-client:
            provider: keycloak
            client-id: exchange-generator-client
            client-secret: ${EXCHANGE_GENERATOR_CLIENT_SECRET}
            scope: resource.readwrite
            authorization-grant-type: client_credentials
            clientAuthenticationMethod: client_secret_post
          notification-client:
            provider: keycloak
            client-id: notification-client
            client-secret: ${NOTIFICATION_CLIENT_SECRET}
            scope: resource.readwrite
            authorization-grant-type: client_credentials
            clientAuthenticationMethod: client_secret_post
          transfer-client:
            provider: keycloak
            client-id: transfer-client
            client-secret: ${TRANSFER_CLIENT_SECRET}
            scope: resource.readwrite
            authorization-grant-type: client_credentials
            clientAuthenticationMethod: client_secret_post
          blocker-client:
            provider: keycloak
            client-id: blocker-client
            client-secret: ${BLOCKER_CLIENT_SECRET}
            scope: resource.readwrite
            authorization-grant-type: client_credentials
            clientAuthenticationMethod: client_secret_post
