pipeline {
    agent any

    environment {
        DOCKER_REGISTRY                     = credentials('DOCKER_REGISTRY')
        NEXUS_REPOSITORY_RELEASES_URL       = 'http://nexus:8081/repository/maven-releases/'
        GITHUB_USERNAME                     = credentials('GITHUB_USERNAME')
        IMAGE_TAG                           = "${env.BUILD_NUMBER}"
        NEXUS_PASSWORD                      = credentials('NEXUS_JENKINS_PASSWORD')
        STUBRUNNER_PASSWORD                 = credentials('NEXUS_JENKINS_PASSWORD')
        STUBRUNNER_USERNAME                 = 'jenkins'

        TEST_REPORT_DIR                     = 'build/reports/tests/test'
        CONTRACT_TEST_REPORT_DIR            = 'build/reports/tests/contractTest'
        JACOCO_HTML                         = 'build/reports/jacoco/test/html'



        MODULE = 'transfer-service'
    }

    stages {
        stage('Set CI Version') {
            steps {
                script {
                    def date = new Date()
                    def formatter = new java.text.SimpleDateFormat("yyyyMMdd-HHmm")
                    def timestamp = formatter.format(date)
                    env.IMAGE_TAG = "${env.BUILD_NUMBER}"
                    env.CI_VERSION = "${env.BUILD_NUMBER}-${timestamp}"
                    echo "CI_VERSION set to ${env.CI_VERSION}"
                }
            }
        }
        stage("Получение исходников") {
            steps {
                sh 'chmod +x ./gradlew'
            }
        }
        stage("Сборка и тест") {
            steps {
                withCredentials([string(credentialsId: 'NEXUS_JENKINS_PASSWORD', variable: 'NEXUS_PASSWORD')]) {
                    sh """
                    ./gradlew :${env.MODULE}:clean :${env.MODULE}:build -PnexusUsername=jenkins -PnexusPassword=$NEXUS_PASSWORD
                    """
                }
            }
        }
        stage('Генерация метрик') {
            steps {
                echo "Ключевые метрики сборки:"
                echo "- Длительность: ${currentBuild.durationString}"
                echo "- Автор: ${env.BUILD_USER ?: 'N/A'}"
                echo "- Статус: ${currentBuild.currentResult}"
                echo "- Коммит: ${env.GIT_COMMIT ?: 'N/A'}"
            }
        }
        stage('Публикация отчетов') {
            parallel {
                stage('Отчёт Jacoco в HTML') {
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                            publishHTML(target: [
                                reportDir: "${env.MODULE}/${env.JACOCO_HTML}",
                                reportFiles: 'index.html',
                                reportName: 'Jacoco Code Coverage',
                                keepAll: true,
                                alwaysLinkToLastBuild: true,
                                allowMissing: true
                            ])
                        }
                    }
                }
                stage('Отчёт по тестам в HTML') {
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                            publishHTML(target: [
                                reportDir: "${env.MODULE}/${env.TEST_REPORT_DIR}",
                                reportFiles: 'index.html',
                                reportName: 'Unit tests report',
                                keepAll: true,
                                alwaysLinkToLastBuild: true,
                                allowMissing: true
                            ])
                        }
                    }
                }
                stage('Отчёт по контрактным тестам в HTML') {
                    steps {
                        catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                            publishHTML(target: [
                                reportDir: "${env.MODULE}/${env.CONTRACT_TEST_REPORT_DIR}",
                                reportFiles: 'index.html',
                                reportName: 'Contracts tests report',
                                keepAll: true,
                                alwaysLinkToLastBuild: true,
                                allowMissing: true
                            ])
                        }
                    }
                }
            }
        }

        stage("Build Docker Image") {
            steps {
                sh "docker build -t ${env.DOCKER_REGISTRY}/${env.MODULE}:${env.IMAGE_TAG} --build_arg CI_VERSION='${env.CI_VERSION}' ${env.MODULE}"
            }
        }
        stage('Push Docker Images') {
            steps {
                withCredentials([string(credentialsId: 'GHCR_TOKEN', variable: 'GHCR_TOKEN')]) {
                    sh """
                    echo \$GHCR_TOKEN | docker login ghcr.io -u ${env.GITHUB_USERNAME} --password-stdin
                    docker push ${env.DOCKER_REGISTRY}/${env.MODULE}:${env.IMAGE_TAG}
                    """
                }
            }
        }
    }
    post {
        success {
            sh "echo 'Сборка ${env.MODULE} успешно завершена.'"
        }
        failure {
            echo "Сборка ${env.MODULE} завершилась с ошибкой."
        }
    }
}
