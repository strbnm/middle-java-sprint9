import java.text.SimpleDateFormat

plugins {
    id 'java'
    id 'groovy'
    id 'maven-publish'
    id "jacoco"
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.freefair.lombok' version '8.13.1'
    id 'org.openapi.generator' version "7.11.0"
    id 'org.springframework.cloud.contract' version "4.2.1"
}

dependencies {
    implementation project(':notifications-service')
    implementation project(':exchange-service')
    implementation project(':blocker-service')
    implementation project(':exchange-generator')
    implementation project(':accounts-service')
    implementation project(':cash-service')
    implementation project(':transfer-service')
    implementation project(':front-ui')
}

static def getBuildTimestamp() {
    def date = new Date()
    def format = new SimpleDateFormat("yyyyMMdd-HHmmss")
    return format.format(date)
}

allprojects {
    group = 'ru.strbnm'
    if (System.getenv('CI_VERSION')) {
        version = "1.0.0.${System.getenv('CI_VERSION')}"
        if (System.getenv('NEXUS_REPOSITORY_RELEASES_URL')) {
            ext {
                set('mavenRepositoryUrl', System.getenv('NEXUS_REPOSITORY_RELEASES_URL'))
            }
        } else {
            ext {
                set('mavenRepositoryUrl', 'http://localhost:8081/repository/maven-releases/')
            }
        }
    } else {
        version = '1.0.0-SNAPSHOT'
        ext {
            set('mavenRepositoryUrl', 'http://localhost:8081/repository/maven-snapshots/')
        }
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }

    jacoco {
        toolVersion = "0.8.13"
    }

    repositories {
        mavenCentral()
        maven {
            name = "nexus-docker"
            url = mavenRepositoryUrl
            allowInsecureProtocol = true
            credentials {
                username = project.findProperty("nexusUsername") as String
                password = project.findProperty("nexusPassword") as String
            }
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'io.freefair.lombok'
    apply plugin: 'org.openapi.generator'
    apply plugin: 'org.springframework.cloud.contract'
    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'

    configurations.configureEach {
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation platform('io.micrometer:micrometer-bom:1.15.1')
        implementation 'io.opentelemetry:opentelemetry-exporter-zipkin'
        implementation 'io.micrometer:micrometer-tracing-bridge-otel'
        implementation 'io.micrometer:micrometer-registry-prometheus'
        implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.25.0'
        implementation 'org.slf4j:slf4j-api:2.0.17'
        implementation 'org.apache.kafka:kafka-clients:3.9.1'
    }
    tasks.named('test') {
        useJUnitPlatform()
        finalizedBy(tasks.jacocoTestReport)
    }

    ext {
        set('springCloudVersion', "2024.0.1")
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    tasks.jacocoTestReport {
        dependsOn(tasks.test)

        reports {
            html.required.set(true)
            xml.required.set(true)
            csv.required.set(false)
        }
    }

    publishing {
        publications {
            create("mavenJava", MavenPublication) {
                from components.java
                artifact verifierStubsJar
            }
        }
        repositories {
            maven {
                name = "nexus-docker"
                url = mavenRepositoryUrl
                allowInsecureProtocol = true
                credentials {
                    username = project.findProperty("nexusUsername") as String
                    password = project.findProperty("nexusPassword") as String
                }
            }
        }
    }
}

// Отключаем задачи Java в корневом проекте
tasks.withType(JavaCompile).configureEach {
    onlyIf { false }
}

tasks.withType(Jar).configureEach {
    onlyIf { false }
}

// Отключаем задачи Spring Cloud Contract
afterEvaluate {
    tasks.matching { it.name.startsWith("contract") || it.name.contains("Contract") }.configureEach {
        enabled = false
    }
}