pipeline {
    agent any

    environment {
        DOCKER_REGISTRY                     = credentials('DOCKER_REGISTRY')
        ACCOUNTS_SERVICE_DB_PASSWORD        = credentials('ACCOUNTS_SERVICE_DB_PASSWORD')
        CASH_SERVICE_DB_PASSWORD            = credentials('CASH_SERVICE_DB_PASSWORD')
        TRANSFER_SERVICE_DB_PASSWORD        = credentials('TRANSFER_SERVICE_DB_PASSWORD')
        EXCHANGE_SERVICE_DB_PASSWORD        = credentials('EXCHANGE_SERVICE_DB_PASSWORD')
        NOTIFICATIONS_SERVICE_DB_PASSWORD   = credentials('NOTIFICATIONS_SERVICE_DB_PASSWORD')
        RABBITMQ_DEFAULT_PASS               = credentials('RABBITMQ_DEFAULT_PASS')
        ACCOUNTS_CLIENT_SECRET              = credentials('ACCOUNTS_CLIENT_SECRET')
        CASH_CLIENT_SECRET                  = credentials('CASH_CLIENT_SECRET')
        EXCHANGE_CLIENT_SECRET              = credentials('EXCHANGE_CLIENT_SECRET')
        NOTIFICATION_CLIENT_SECRET          = credentials('NOTIFICATION_CLIENT_SECRET')
        TRANSFER_CLIENT_SECRET              = credentials('TRANSFER_CLIENT_SECRET')
        BLOCKER_CLIENT_SECRET               = credentials('BLOCKER_CLIENT_SECRET')
        NEXUS_REPOSITORY_RELEASES_URL       = 'http://nexus:8081/repository/maven-releases/'

        GITHUB_USERNAME         = credentials('GITHUB_USERNAME')

        DB_NAME                 = 'app_db'
        ACCOUNTS_DB_USER        = 'accounts_user'
        CASH_DB_USER            = 'cash_user'
        TRANSFER_DB_USER        = 'transfer_user'
        EXCHANGE_DB_USER        = 'exchange_user'
        NOTIFICATIONS_DB_USER   = 'notifications_user'
        IMAGE_TAG               = "${env.BUILD_NUMBER}"

        NEXUS_PASSWORD          = credentials('NEXUS_JENKINS_PASSWORD')
        NEXUS_USER              = 'jenkins'

        STUBRUNNER_PASSWORD     = credentials('NEXUS_JENKINS_PASSWORD')
        STUBRUNNER_USERNAME     = 'jenkins'
    }

    stages {
        stage('Build & Tests First Block') {
            parallel {
                stage('Exchange Service') {
                    steps {
                        dir('exchange-service') {
                            sh './gradlew clean build -PnexusUsername=jenkins -PnexusPassword=$NEXUS_PASSWORD'
                        }
                    }
                }
                stage('Notifications Service') {
                    steps {
                        dir('notifications-service') {
                            sh './gradlew clean build -PnexusUsername=jenkins -PnexusPassword=$NEXUS_PASSWORD'
                        }
                    }
                }
                stage('Blocker Service') {
                    steps {
                        dir('blocker-service') {
                            sh './gradlew clean build -PnexusUsername=jenkins -PnexusPassword=$NEXUS_PASSWORD'
                        }
                    }
                }
            }
        }
        stage('Build & Tests Second Block') {
            parallel {
                stage('Exchange Generator') {
                    steps {
                        dir('exchange-generator') {
                            sh './gradlew clean build -PnexusUsername=jenkins -PnexusPassword=$NEXUS_PASSWORD'
                        }
                    }
                }
                stage('Accounts Service') {
                    steps {
                        dir('accounts-service') {
                            sh './gradlew clean build -PnexusUsername=jenkins -PnexusPassword=$NEXUS_PASSWORD'
                        }
                    }
                }
            }
            stage('Cash Service') {
                steps {
                    dir('cash-service') {
                        sh './gradlew clean build -PnexusUsername=jenkins -PnexusPassword=$NEXUS_PASSWORD'
                    }
                }
            }
            stage('Transfer Service') {
                steps {
                    dir('transfer-service') {
                        sh './gradlew clean build -PnexusUsername=jenkins -PnexusPassword=$NEXUS_PASSWORD'
                    }
                }
            }
            stage('Front UI') {
                steps {
                    dir('front-ui') {
                        sh './gradlew clean build -PnexusUsername=jenkins -PnexusPassword=$NEXUS_PASSWORD'
                    }
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                sh """
                docker build -t ${DOCKER_REGISTRY}/accounts-service:${IMAGE_TAG} accounts-service
                docker build -t ${DOCKER_REGISTRY}/notifications-service:${IMAGE_TAG} notifications-service
                docker build -t ${DOCKER_REGISTRY}/exchange-service:${IMAGE_TAG} exchange-service
                docker build -t ${DOCKER_REGISTRY}/exchange-generator:${IMAGE_TAG} exchange-generator
                docker build -t ${DOCKER_REGISTRY}/blocker-service:${IMAGE_TAG} blocker-service
                docker build -t ${DOCKER_REGISTRY}/cash-service:${IMAGE_TAG} cash-service
                docker build -t ${DOCKER_REGISTRY}/transfer-service:${IMAGE_TAG} transfer-service
                docker build -t ${DOCKER_REGISTRY}/front-ui:${IMAGE_TAG} front-ui
                """
            }
        }

        stage('Push Docker Images') {
            steps {
                withCredentials([string(credentialsId: 'GHCR_TOKEN', variable: 'GHCR_TOKEN')]) {
                    sh """
                    echo \$GHCR_TOKEN | docker login ghcr.io -u ${GITHUB_USERNAME} --password-stdin
                    docker push ${DOCKER_REGISTRY}/accounts-service:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/notifications-service:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/exchange-service:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/exchange-generator:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/blocker-service:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/cash-service:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/transfer-service:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/front-ui:${IMAGE_TAG}
                    """
                }
            }
        }
//         stage('Install PostgreSQL to TEST') {
//             steps {
//                 sh """
//                 helm repo add bitnami https://charts.bitnami.com/bitnami
//                 helm repo update
//
//                 helm upgrade --install postgres bitnami/postgresql \\
//                   --namespace test --create-namespace \\
//                   --set auth.database=${DB_NAME} \\
//                   --set auth.username=${DB_USER} \\
//                   --set auth.password=${DB_PASSWORD}
//                 """
//             }
//         }
//
//         stage('Create DB Secrets for TEST') {
//             steps {
//                 sh """
//                 kubectl create secret generic customer-service-customer-db \\
//                   --from-literal=password=${DB_PASSWORD} \\
//                   -n test --dry-run=client -o yaml | kubectl apply -f -
//
//                 kubectl create secret generic order-service-order-db \\
//                   --from-literal=password=${DB_PASSWORD} \\
//                   -n test --dry-run=client -o yaml | kubectl apply -f -
//                 """
//             }
//         }
//
//         stage('Helm Deploy to TEST') {
//             steps {
//                 sh """
//                 helm upgrade --install customer-service my-microservices-app/charts/customer-service \\
//                   --namespace test --create-namespace \\
//                   --set image.repository=${DOCKER_REGISTRY}/customer-service \\
//                   --set image.tag=${IMAGE_TAG} \\
//                   --set ingress.enabled=true \\
//                   --set ingress.hosts[0].host=customer.test.local \\
//                   --set ingress.hosts[0].paths[0].path="/" \\
//                   --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"
//
//                 helm upgrade --install order-service my-microservices-app/charts/order-service \\
//                   --namespace test --create-namespace \\
//                   --set image.repository=${DOCKER_REGISTRY}/order-service \\
//                   --set image.tag=${IMAGE_TAG} \\
//                   --set ingress.enabled=true \\
//                   --set ingress.hosts[0].host=order.test.local \\
//                   --set ingress.hosts[0].paths[0].path="/" \\
//                   --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"
//                 """
//             }
//         }
//
//         stage('Manual Approval for PROD') {
//             steps {
//                 input message: 'Deploy to PROD environment?', ok: 'Yes, deploy'
//             }
//         }
//
//         stage('Install PostgreSQL to PROD') {
//             steps {
//                 sh """
//                 helm upgrade --install postgres bitnami/postgresql \\
//                   --namespace prod --create-namespace \\
//                   --set auth.database=${DB_NAME} \\
//                   --set auth.username=${DB_USER} \\
//                   --set auth.password=${DB_PASSWORD}
//                 """
//             }
//         }
//
//         stage('Create DB Secrets for PROD') {
//             steps {
//                 sh """
//                 kubectl create secret generic customer-service-customer-db \\
//                   --from-literal=password=${DB_PASSWORD} \\
//                   -n prod --dry-run=client -o yaml | kubectl apply -f -
//
//                 kubectl create secret generic order-service-order-db \\
//                   --from-literal=password=${DB_PASSWORD} \\
//                   -n prod --dry-run=client -o yaml | kubectl apply -f -
//                 """
//             }
//         }
//
//         stage('Helm Deploy to PROD') {
//             steps {
//                 sh """
//                 helm upgrade --install customer-service my-microservices-app/charts/customer-service \\
//                   --namespace prod --create-namespace \\
//                   --set image.repository=${DOCKER_REGISTRY}/customer-service \\
//                   --set image.tag=${IMAGE_TAG} \\
//                   --set ingress.enabled=true \\
//                   --set ingress.hosts[0].host=customer.prod.local \\
//                   --set ingress.hosts[0].paths[0].path="/" \\
//                   --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"
//
//                 helm upgrade --install order-service my-microservices-app/charts/order-service \\
//                   --namespace prod --create-namespace \\
//                   --set image.repository=${DOCKER_REGISTRY}/order-service \\
//                   --set image.tag=${IMAGE_TAG} \\
//                   --set ingress.enabled=true \\
//                   --set ingress.hosts[0].host=order.prod.local \\
//                   --set ingress.hosts[0].paths[0].path="/" \\
//                   --set ingress.hosts[0].paths[0].pathType="ImplementationSpecific"
//                 """
//             }
//         }
    }
}