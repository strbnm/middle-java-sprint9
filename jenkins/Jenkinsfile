pipeline {
    agent any

    parameters {
        booleanParam(name: 'SKIP_TEST', defaultValue: false, description: 'Skip test for build?')
    }

    environment {
        RELEASE_NAME                        = 'bank-app'

        DOCKER_REGISTRY                     = credentials('DOCKER_REGISTRY')
        GITHUB_USERNAME                     = credentials('GITHUB_USERNAME')
    }

    stages {
        stage("Build, Test And Push Images") {
            when {
                branch 'master'
            }
            stages {
                stage('Accounts Service') {
                    steps {
                        script {
                            def childBuild = build job: 'accounts-service/master',
                                parameters: [
                                    booleanParam(name: 'SKIP_DEPLOY', value: true),
                                    booleanParam(name: 'SKIP_TEST', value: params.SKIP_TEST)
                                ],
                                propagate: true,
                                wait: true
                            echo "Номер сборки: ${childBuild.number}"
                            env.ACCOUNTS_BUILD_NUMBER = "${childBuild.number}"
                        }
                    }
                }
                stage('Blocker Service') {
                    steps {
                        script {
                            def childBuild = build job: 'blocker-service/master',
                                parameters: [
                                    booleanParam(name: 'SKIP_DEPLOY', value: true),
                                    booleanParam(name: 'SKIP_TEST', value: params.SKIP_TEST)
                                ],
                                propagate: true,
                                wait: true
                            echo "Номер сборки: ${childBuild.number}"
                            env.BLOCKER_BUILD_NUMBER = "${childBuild.number}"
                        }
                    }
                }
                stage('Cash Service') {
                    steps {
                        script {
                            def childBuild = build job: 'cash-service/master',
                                parameters: [
                                    booleanParam(name: 'SKIP_DEPLOY', value: true),
                                    booleanParam(name: 'SKIP_TEST', value: params.SKIP_TEST)
                                ],
                                propagate: true,
                                wait: true
                            echo "Номер сборки: ${childBuild.number}"
                            env.CASH_BUILD_NUMBER = "${childBuild.number}"
                        }
                    }
                }
                stage('Transfer Service') {
                    steps {
                        script {
                            def childBuild = build job: 'transfer-service/master',
                                parameters: [
                                    booleanParam(name: 'SKIP_DEPLOY', value: true),
                                    booleanParam(name: 'SKIP_TEST', value: params.SKIP_TEST)
                                ],
                                propagate: true,
                                wait: true
                            echo "Номер сборки: ${childBuild.number}"
                            env.TRANSFER_BUILD_NUMBER = "${childBuild.number}"
                        }
                    }
                }
                stage('Exchange Service') {
                    steps {
                        script {
                            def childBuild = build job: 'exchange-service/master',
                                parameters: [
                                    booleanParam(name: 'SKIP_DEPLOY', value: true),
                                    booleanParam(name: 'SKIP_TEST', value: params.SKIP_TEST)
                                ],
                                propagate: true,
                                wait: true
                            echo "Номер сборки: ${childBuild.number}"
                            env.EXCHANGE_BUILD_NUMBER = "${childBuild.number}"
                        }
                    }
                }
                stage('Exchange Generator') {
                    steps {
                        script {
                            def childBuild = build job: 'exchange-generator/master',
                                parameters: [
                                    booleanParam(name: 'SKIP_DEPLOY', value: true),
                                    booleanParam(name: 'SKIP_TEST', value: params.SKIP_TEST)
                                ],
                                propagate: true,
                                wait: true
                            echo "Номер сборки: ${childBuild.number}"
                            env.EXCHANGE_GENERATOR_BUILD_NUMBER = "${childBuild.number}"
                        }
                    }
                }
                stage('Notifications Service') {
                    steps {
                        script {
                            def childBuild = build job: 'notifications-service/master',
                                parameters: [
                                    booleanParam(name: 'SKIP_DEPLOY', value: true),
                                    booleanParam(name: 'SKIP_TEST', value: params.SKIP_TEST)
                                ],
                                propagate: true,
                                wait: true
                            echo "Номер сборки: ${childBuild.number}"
                            env.NOTIFICATIONS_BUILD_NUMBER = "${childBuild.number}"
                        }
                    }
                }
                stage('Front UI') {
                    steps {
                        script {
                            def childBuild = build job: 'front-ui/master',
                                parameters: [
                                    booleanParam(name: 'SKIP_DEPLOY', value: true),
                                    booleanParam(name: 'SKIP_TEST', value: params.SKIP_TEST)
                                ],
                                propagate: true,
                                wait: true
                            echo "Номер сборки: ${childBuild.number}"
                            env.FRONT_UI_BUILD_NUMBER = "${childBuild.number}"
                        }
                    }
                }
            }
        }
        stage("Deploy All On TEST") {
            when {
                branch 'master'
            }
            stages {
                stage('Создание пространства имен') {
                    steps {
                        sh 'kubectl get namespace test >/dev/null 2>&1 || kubectl create namespace test'
                    }
                }
                stage('Create Secrets for TEST') {
                    steps {
                        withCredentials([string(credentialsId: 'GHCR_TOKEN', variable: 'GHCR_TOKEN')]) {
                            sh """
                            kubectl create secret docker-registry ghcr-registry \\
                            --docker-server=${DOCKER_REGISTRY} \\
                            --docker-username=${GITHUB_USERNAME} \\
                            --docker-password=${GHCR_TOKEN} \\
                            -n test --dry-run=client -o yaml | kubectl apply -f -
                            """
                        }
                        withCredentials([string(credentialsId: 'CASH_SERVICE_DB_PASSWORD', variable: 'DB_PASSWORD')]) {
                            sh '''
                            kubectl create secret generic $RELEASE_NAME-cash-service-db \\
                              --from-literal=password=$DB_PASSWORD \\
                              -n test --dry-run=client -o yaml | kubectl apply -f -
                            '''
                        }
                        withCredentials([string(credentialsId: 'TRANSFER_SERVICE_DB_PASSWORD', variable: 'DB_PASSWORD')]) {
                            sh '''
                            kubectl create secret generic $RELEASE_NAME-transfer-service-db \\
                              --from-literal=password=$DB_PASSWORD \\
                              -n test --dry-run=client -o yaml | kubectl apply -f -
                            '''
                        }
                        withCredentials([string(credentialsId: 'EXCHANGE_SERVICE_DB_PASSWORD', variable: 'DB_PASSWORD')]) {
                            sh '''
                            kubectl create secret generic $RELEASE_NAME-exchange-service-db \\
                              --from-literal=password=$DB_PASSWORD \\
                              -n test --dry-run=client -o yaml | kubectl apply -f -
                            '''
                        }
                        withCredentials([string(credentialsId: 'NOTIFICATIONS_SERVICE_DB_PASSWORD', variable: 'DB_PASSWORD')]) {
                            sh '''
                            kubectl create secret generic $RELEASE_NAME-notifications-service-db \\
                              --from-literal=password=$DB_PASSWORD \\
                              -n test --dry-run=client -o yaml | kubectl apply -f -
                            '''
                        }
                        withCredentials([string(credentialsId: 'ACCOUNTS_SERVICE_DB_PASSWORD', variable: 'DB_PASSWORD')]) {
                            sh '''
                            kubectl create secret generic $RELEASE_NAME-accounts-service-db \\
                              --from-literal=password=$DB_PASSWORD \\
                              -n test --dry-run=client -o yaml | kubectl apply -f -
                            '''
                        }
                        withCredentials([string(credentialsId: 'NOTIFICATION_CLIENT_SECRET', variable: 'NOTIFICATION_CLIENT_SECRET')]) {
                            sh '''
                            kubectl create secret generic oauth2-client-secret-notifications \\
                              --from-literal=password=$NOTIFICATION_CLIENT_SECRET \\
                              -n test --dry-run=client -o yaml | kubectl apply -f -
                            '''
                        }
                        withCredentials([string(credentialsId: 'ACCOUNTS_CLIENT_SECRET', variable: 'ACCOUNTS_CLIENT_SECRET')]) {
                            sh '''
                            kubectl create secret generic oauth2-client-secret-accounts \\
                              --from-literal=password=$ACCOUNTS_CLIENT_SECRET \\
                              -n test --dry-run=client -o yaml | kubectl apply -f -
                            '''
                        }
                        withCredentials([string(credentialsId: 'BLOCKER_CLIENT_SECRET', variable: 'BLOCKER_CLIENT_SECRET')]) {
                            sh '''
                            kubectl create secret generic oauth2-client-secret-blocker \\
                              --from-literal=password=$BLOCKER_CLIENT_SECRET \\
                              -n test --dry-run=client -o yaml | kubectl apply -f -
                            '''
                        }
                        withCredentials([string(credentialsId: 'EXCHANGE_CLIENT_SECRET', variable: 'EXCHANGE_CLIENT_SECRET')]) {
                            sh '''
                            kubectl create secret generic oauth2-client-secret-exchange \\
                              --from-literal=password=$EXCHANGE_CLIENT_SECRET \\
                              -n test --dry-run=client -o yaml | kubectl apply -f -
                            '''
                        }
                        withCredentials([string(credentialsId: 'CASH_CLIENT_SECRET', variable: 'CASH_CLIENT_SECRET')]) {
                            sh '''
                            kubectl create secret generic oauth2-client-secret-cash \\
                              --from-literal=password=$CASH_CLIENT_SECRET \\
                              -n test --dry-run=client -o yaml | kubectl apply -f -
                            '''
                        }
                        withCredentials([string(credentialsId: 'TRANSFER_CLIENT_SECRET', variable: 'TRANSFER_CLIENT_SECRET')]) {
                            sh '''
                            kubectl create secret generic oauth2-client-secret-transfer \\
                              --from-literal=password=$TRANSFER_CLIENT_SECRET \\
                              -n test --dry-run=client -o yaml | kubectl apply -f -
                            '''
                        }
                        withCredentials([string(credentialsId: 'KEYCLOAK_PASS', variable: 'KEYCLOAK_PASS')]) {
                            sh '''
                            kubectl create secret generic keycloak-secret \\
                              --from-literal=password=$KEYCLOAK_PASS \\
                              -n test --dry-run=client -o yaml | kubectl apply -f -
                            '''
                        }
                    }
                }
                // Необходимо наличие установленных CRD Gateway API в кластере для создания HTTPRoute
                stage('Install Nginx Gateway Fabric if needed') {
                    steps {
                      sh """
                      if ! kubectl get crd gateways.gateway.networking.k8s.io >/dev/null 2>&1; then
                        echo "CRD Gateway API not found, installing..."
                        kubectl kustomize "https://github.com/nginx/nginx-gateway-fabric/config/crd/gateway-api/standard?ref=v2.0.1" | kubectl apply -f -
                      else
                        echo "CRD Gateway API already installed - skipping"
                      fi

                      if ! helm list -n nginx-gateway | grep -q ngf; then
                        echo "Nginx Gateway Fabric not found, installing..."
                        helm upgrade --install ngf oci://ghcr.io/nginx/charts/nginx-gateway-fabric \\
                          --create-namespace -n nginx-gateway \\
                          --set service.type=LoadBalancer

                        echo "Waiting for NGF deployment to be ready..."
                        kubectl rollout status deployment/ngf-nginx-gateway-fabric -n nginx-gateway --timeout=60s

                        echo "Creating Gateway object..."
                        helm template gateway ./bank-app -n nginx-gateway -s templates/gateway.yaml --set gateway.enabled=true | kubectl apply -n nginx-gateway -f -
                      else
                        echo "Nginx Gateway Fabric already installed — skipping config and upgrade."
                      fi
                      """
                    }

                }
                stage('Install Keycloak if needed') {
                    steps {
                        sh """
                        # Используется только в учебном проекте!!! Создаем ConfigMap с конфигурацией realm из файла.
                        # В реальных проектах должно быть создано отдельно и конфигурация не должна храниться в VCS

                        if ! helm list -n test | grep -q keycloak; then
                          echo "Keycloak not found, installing..."

                          kubectl create configmap my-realm-config \\
                            --from-file=keycloak/bank-app-realm-test.json \\
                            -n test --dry-run=client -o yaml | kubectl apply -f -

                          helm upgrade --install keycloak oci://registry-1.docker.io/bitnamicharts/keycloak \\
                            -n test --create-namespace \\
                            --set extraVolumes[0].name=realm-config \\
                            --set extraVolumes[0].configMap.name=my-realm-config \\
                            --set extraVolumeMounts[0].name=realm-config \\
                            --set extraVolumeMounts[0].mountPath=/opt/bitnami/keycloak/data/import \\
                            --set extraVolumeMounts[0].readOnly=true \\
                            --set extraStartupArgs="--import-realm"

                          helm template keycloak ./bank-app -n test -s templates/keycloak_httproute.yaml --set keycloak.enabled=true | kubectl apply -f -

                        else
                          echo "Keycloak already installed — skipping config and upgrade."
                        fi
                        """
                    }
                }
                stage('Install Kafka if needed') {
                    steps {
                        script {
                            def kafkaOutput = sh(
                                script: "kubectl get strimzi -o name -n kafka",
                                returnStdout: true
                            ).trim()

                            if (kafkaOutput == "") {
                                echo "Kafka cluster not found, installing..."
                                build job: 'kafka-job/master',
                                      propagate: true,
                                      wait: true
                            } else {
                                echo "Kafka already installed — skipping install."
                            }
                        }
                    }
                }
                stage('Helm Deploy to TEST') {
                    steps {
                        dir('bank-app') {
                            sh """
                            helm upgrade --install ${RELEASE_NAME} . \\
                              --namespace test --create-namespace \\
                              --set accounts-service.image.repository=${DOCKER_REGISTRY}/accounts-service \\
                              --set accounts-service.image.tag=${env.ACCOUNTS_BUILD_NUMBER} \\
                              --set accounts-service.postgresql.auth.existingSecret=$RELEASE_NAME-accounts-service-db \\
                              --set cash-service.image.repository=${DOCKER_REGISTRY}/cash-service \\
                              --set cash-service.image.tag=${env.CASH_BUILD_NUMBER} \\
                              --set cash-service.postgresql.auth.existingSecret=$RELEASE_NAME-cash-service-db \\
                              --set transfer-service.image.repository=${DOCKER_REGISTRY}/transfer-service \\
                              --set transfer-service.image.tag=${env.TRANSFER_BUILD_NUMBER} \\
                              --set transfer-service.postgresql.auth.existingSecret=$RELEASE_NAME-transfer-service-db \\
                              --set exchange-service.image.repository=${DOCKER_REGISTRY}/exchange-service \\
                              --set exchange-service.image.tag=${env.EXCHANGE_BUILD_NUMBER} \\
                              --set exchange-service.postgresql.auth.existingSecret=$RELEASE_NAME-exchange-service-db \\
                              --set exchange-generator.image.repository=${DOCKER_REGISTRY}/exchange-generator \\
                              --set exchange-generator.image.tag=${env.EXCHANGE_GENERATOR_BUILD_NUMBER} \\
                              --set blocker-service.image.repository=${DOCKER_REGISTRY}/blocker-service \\
                              --set blocker-service.image.tag=${env.BLOCKER_BUILD_NUMBER} \\
                              --set notifications-service.image.repository=${DOCKER_REGISTRY}/notifications-service \\
                              --set notifications-service.image.tag=${env.NOTIFICATIONS_BUILD_NUMBER} \\
                              --set notifications-service.postgresql.auth.existingSecret=$RELEASE_NAME-notifications-service-db \\
                              --set front-ui.image.repository=${DOCKER_REGISTRY}/front-ui \\
                              --set front-ui.image.tag=${env.FRONT_UI_BUILD_NUMBER}
                            """
                        }
                    }
                }
            }
        }
        stage('Ручное подтверждение для PROD') {
            when {
                branch 'master'
            }
            steps {
                input message: 'Установить в PROD?', ok: 'Да, установить'
            }
        }
        stage("Развертывание на PROD") {
            when {
                branch 'master'
            }
            stages {
                stage('Создание пространства имен') {
                    steps {
                        sh 'kubectl get namespace prod >/dev/null 2>&1 || kubectl create namespace prod'
                    }
                }
                stage('Create Secrets for PROD') {
                    steps {
                        withCredentials([string(credentialsId: 'GHCR_TOKEN', variable: 'GHCR_TOKEN')]) {
                            sh """
                            kubectl create secret docker-registry ghcr-registry \\
                            --docker-server=${DOCKER_REGISTRY} \\
                            --docker-username=${GITHUB_USERNAME} \\
                            --docker-password=${GHCR_TOKEN} \\
                            -n prod --dry-run=client -o yaml | kubectl apply -f -
                            """
                        }
                        withCredentials([string(credentialsId: 'CASH_SERVICE_DB_PASSWORD', variable: 'DB_PASSWORD')]) {
                            sh '''
                            kubectl create secret generic $RELEASE_NAME-cash-service-db \\
                              --from-literal=password=$DB_PASSWORD \\
                              -n prod --dry-run=client -o yaml | kubectl apply -f -
                            '''
                        }
                        withCredentials([string(credentialsId: 'TRANSFER_SERVICE_DB_PASSWORD', variable: 'DB_PASSWORD')]) {
                            sh '''
                            kubectl create secret generic $RELEASE_NAME-transfer-service-db \\
                              --from-literal=password=$DB_PASSWORD \\
                              -n prod --dry-run=client -o yaml | kubectl apply -f -
                            '''
                        }
                        withCredentials([string(credentialsId: 'EXCHANGE_SERVICE_DB_PASSWORD', variable: 'DB_PASSWORD')]) {
                            sh '''
                            kubectl create secret generic $RELEASE_NAME-exchange-service-db \\
                              --from-literal=password=$DB_PASSWORD \\
                              -n prod --dry-run=client -o yaml | kubectl apply -f -
                            '''
                        }
                        withCredentials([string(credentialsId: 'NOTIFICATIONS_SERVICE_DB_PASSWORD', variable: 'DB_PASSWORD')]) {
                            sh '''
                            kubectl create secret generic $RELEASE_NAME-notifications-service-db \\
                              --from-literal=password=$DB_PASSWORD \\
                              -n prod --dry-run=client -o yaml | kubectl apply -f -
                            '''
                        }
                        withCredentials([string(credentialsId: 'ACCOUNTS_SERVICE_DB_PASSWORD', variable: 'DB_PASSWORD')]) {
                            sh '''
                            kubectl create secret generic $RELEASE_NAME-accounts-service-db \\
                              --from-literal=password=$DB_PASSWORD \\
                              -n prod --dry-run=client -o yaml | kubectl apply -f -
                            '''
                        }
                        withCredentials([string(credentialsId: 'NOTIFICATION_CLIENT_SECRET', variable: 'NOTIFICATION_CLIENT_SECRET')]) {
                            sh '''
                            kubectl create secret generic oauth2-client-secret-notifications \\
                              --from-literal=password=$NOTIFICATION_CLIENT_SECRET \\
                              -n prod --dry-run=client -o yaml | kubectl apply -f -
                            '''
                        }
                        withCredentials([string(credentialsId: 'ACCOUNTS_CLIENT_SECRET', variable: 'ACCOUNTS_CLIENT_SECRET')]) {
                            sh '''
                            kubectl create secret generic oauth2-client-secret-accounts \\
                              --from-literal=password=$ACCOUNTS_CLIENT_SECRET \\
                              -n prod --dry-run=client -o yaml | kubectl apply -f -
                            '''
                        }
                        withCredentials([string(credentialsId: 'BLOCKER_CLIENT_SECRET', variable: 'BLOCKER_CLIENT_SECRET')]) {
                            sh '''
                            kubectl create secret generic oauth2-client-secret-blocker \\
                              --from-literal=password=$BLOCKER_CLIENT_SECRET \\
                              -n prod --dry-run=client -o yaml | kubectl apply -f -
                            '''
                        }
                        withCredentials([string(credentialsId: 'EXCHANGE_CLIENT_SECRET', variable: 'EXCHANGE_CLIENT_SECRET')]) {
                            sh '''
                            kubectl create secret generic oauth2-client-secret-exchange \\
                              --from-literal=password=$EXCHANGE_CLIENT_SECRET \\
                              -n prod --dry-run=client -o yaml | kubectl apply -f -
                            '''
                        }
                        withCredentials([string(credentialsId: 'CASH_CLIENT_SECRET', variable: 'CASH_CLIENT_SECRET')]) {
                            sh '''
                            kubectl create secret generic oauth2-client-secret-cash \\
                              --from-literal=password=$CASH_CLIENT_SECRET \\
                              -n prod --dry-run=client -o yaml | kubectl apply -f -
                            '''
                        }
                        withCredentials([string(credentialsId: 'TRANSFER_CLIENT_SECRET', variable: 'TRANSFER_CLIENT_SECRET')]) {
                            sh '''
                            kubectl create secret generic oauth2-client-secret-transfer \\
                              --from-literal=password=$TRANSFER_CLIENT_SECRET \\
                              -n prod --dry-run=client -o yaml | kubectl apply -f -
                            '''
                        }
                        withCredentials([string(credentialsId: 'KEYCLOAK_PASS', variable: 'KEYCLOAK_PASS')]) {
                            sh '''
                            kubectl create secret generic keycloak-secret \\
                              --from-literal=password=$KEYCLOAK_PASS \\
                              -n prod --dry-run=client -o yaml | kubectl apply -f -
                            '''
                        }
                    }
                }
                // Необходимо наличие установленных CRD Gateway API в кластере для создания HTTPRoute
                stage('Install Nginx Gateway Fabric if needed') {
                    steps {
                      sh """
                      if ! kubectl get crd gateways.gateway.networking.k8s.io >/dev/null 2>&1; then
                        echo "CRD Gateway API not found, installing..."
                        kubectl kustomize "https://github.com/nginx/nginx-gateway-fabric/config/crd/gateway-api/standard?ref=v2.0.1" | kubectl apply -f -
                      else
                        echo "CRD Gateway API already installed - skipping"
                      fi

                      if ! helm list -n nginx-gateway | grep -q ngf; then
                        echo "Nginx Gateway Fabric not found, installing..."
                        helm upgrade --install ngf oci://ghcr.io/nginx/charts/nginx-gateway-fabric \\
                          --create-namespace -n nginx-gateway \\
                          --set service.type=LoadBalancer

                        echo "Waiting for NGF deployment to be ready..."
                        kubectl rollout status deployment/ngf-nginx-gateway-fabric -n nginx-gateway --timeout=60s

                        echo "Creating Gateway object..."
                        helm template gateway ./bank-app -n nginx-gateway -s templates/gateway.yaml --set gateway.enabled=true | kubectl apply -n nginx-gateway -f -
                      else
                        echo "Nginx Gateway Fabric already installed — skipping config and upgrade."
                      fi
                      """
                    }

                }
                stage('Install Keycloak if needed') {
                    steps {
                        sh """
                        # Используется только в учебном проекте!!! Создаем ConfigMap с конфигурацией realm из файла.
                        # В реальных проектах должно быть создано отдельно и конфигурация не должна храниться в VCS

                        if ! helm list -n prod | grep -q keycloak; then
                          echo "Keycloak not found, installing..."

                          kubectl create configmap my-realm-config \\
                            --from-file=keycloak/bank-app-realm-prod.json \\
                            -n prod --dry-run=client -o yaml | kubectl apply -f -

                          helm upgrade --install keycloak oci://registry-1.docker.io/bitnamicharts/keycloak \\
                            -n prod --create-namespace \\
                            --set extraVolumes[0].name=realm-config \\
                            --set extraVolumes[0].configMap.name=my-realm-config \\
                            --set extraVolumeMounts[0].name=realm-config \\
                            --set extraVolumeMounts[0].mountPath=/opt/bitnami/keycloak/data/import \\
                            --set extraVolumeMounts[0].readOnly=true \\
                            --set extraStartupArgs="--import-realm"

                          helm template keycloak ./bank-app -n prod -s templates/keycloak_httproute.yaml --set keycloak.enabled=true | kubectl apply -f -

                        else
                          echo "Keycloak already installed — skipping config and upgrade."
                        fi
                        """
                    }
                }
                stage('Install Kafka if needed') {
                    steps {
                        script {
                            def kafkaOutput = sh(
                                script: "kubectl get strimzi -o name -n kafka",
                                returnStdout: true
                            ).trim()

                            if (kafkaOutput == "") {
                                echo "Kafka cluster not found, installing..."
                                build job: 'kafka-job/master',
                                      propagate: true,
                                      wait: true
                            } else {
                                echo "Kafka already installed — skipping install."
                            }
                        }
                    }
                }
                stage('Helm Deploy to PROD') {
                    steps {
                        dir('bank-app') {
                            sh """
                            helm upgrade --install ${RELEASE_NAME} . \\
                              --namespace prod --create-namespace \\
                              --set accounts-service.image.repository=${DOCKER_REGISTRY}/accounts-service \\
                              --set accounts-service.image.tag=${env.ACCOUNTS_BUILD_NUMBER} \\
                              --set accounts-service.postgresql.auth.existingSecret=$RELEASE_NAME-accounts-service-db \\
                              --set cash-service.image.repository=${DOCKER_REGISTRY}/cash-service \\
                              --set cash-service.image.tag=${env.CASH_BUILD_NUMBER} \\
                              --set cash-service.postgresql.auth.existingSecret=$RELEASE_NAME-cash-service-db \\
                              --set transfer-service.image.repository=${DOCKER_REGISTRY}/transfer-service \\
                              --set transfer-service.image.tag=${env.TRANSFER_BUILD_NUMBER} \\
                              --set transfer-service.postgresql.auth.existingSecret=$RELEASE_NAME-transfer-service-db \\
                              --set exchange-service.image.repository=${DOCKER_REGISTRY}/exchange-service \\
                              --set exchange-service.image.tag=${env.EXCHANGE_BUILD_NUMBER} \\
                              --set exchange-service.postgresql.auth.existingSecret=$RELEASE_NAME-exchange-service-db \\
                              --set exchange-generator.image.repository=${DOCKER_REGISTRY}/exchange-generator \\
                              --set exchange-generator.image.tag=${env.EXCHANGE_GENERATOR_BUILD_NUMBER} \\
                              --set blocker-service.image.repository=${DOCKER_REGISTRY}/blocker-service \\
                              --set blocker-service.image.tag=${env.BLOCKER_BUILD_NUMBER} \\
                              --set notifications-service.image.repository=${DOCKER_REGISTRY}/notifications-service \\
                              --set notifications-service.image.tag=${env.NOTIFICATIONS_BUILD_NUMBER} \\
                              --set notifications-service.postgresql.auth.existingSecret=$RELEASE_NAME-notifications-service-db \\
                              --set front-ui.image.repository=${DOCKER_REGISTRY}/front-ui \\
                              --set front-ui.image.tag=${env.FRONT_UI_BUILD_NUMBER}
                            """
                        }
                    }
                }
            }
        }
    }
}
